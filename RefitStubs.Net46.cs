// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Refit;
using Discord_UWP.API.Channel.Models;
using Discord_UWP.SharedModels;
using Discord_UWP.API.Guild.Models;
using Discord_UWP.API.Login.Models;
using Discord_UWP.API.User.Models;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Discord_UWP.API.Channel
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIChannelService : IChannelService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIChannelService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<GuildChannel> GetGuildChannel(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<GuildChannel>) methodImpls["GetGuildChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<DirectMessageChannel> GetDMChannel(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<DirectMessageChannel>) methodImpls["GetDMChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task ModifyChannel(string channelId,ModifyChannel modifyChannel)
        {
            var arguments = new object[] { channelId,modifyChannel };
            return (Task) methodImpls["ModifyChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteChannel(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task) methodImpls["DeleteChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteChannelMessages(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task) methodImpls["DeleteChannelMessages"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Message> GetChannelMessage(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task<Message>) methodImpls["GetChannelMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Message>> GetChannelMessages(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<IEnumerable<Message>>) methodImpls["GetChannelMessages"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Message>> GetChannelMessagesBefore(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task<IEnumerable<Message>>) methodImpls["GetChannelMessagesBefore"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Message>> GetChannelMessagesAfter(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task<IEnumerable<Message>>) methodImpls["GetChannelMessagesAfter"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Message> CreateMessage(string channelId,MessageUpsert message)
        {
            var arguments = new object[] { channelId,message };
            return (Task<Message>) methodImpls["CreateMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task CreateReaction(string channelId,string messageId,string emoji)
        {
            var arguments = new object[] { channelId,messageId,emoji };
            return (Task) methodImpls["CreateReaction"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Message> UploadFile(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<Message>) methodImpls["UploadFile"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Message> EditMessage(string channelId,string messageId,EditMessage editMessage)
        {
            var arguments = new object[] { channelId,messageId,editMessage };
            return (Task<Message>) methodImpls["EditMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteMessage(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task) methodImpls["DeleteMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task BulkDeleteMessages(string channelId,BulkDelete messages)
        {
            var arguments = new object[] { channelId,messages };
            return (Task) methodImpls["BulkDeleteMessages"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteReaction(string channelId,string messageId,string emoji)
        {
            var arguments = new object[] { channelId,messageId,emoji };
            return (Task) methodImpls["DeleteReaction"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task AckMessage(string channelId,string messageId,string body)
        {
            var arguments = new object[] { channelId,messageId,body };
            return (Task) methodImpls["AckMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task EditChannelPermissions(string channelId,string overwriteId,EditChannel editChannel)
        {
            var arguments = new object[] { channelId,overwriteId,editChannel };
            return (Task) methodImpls["EditChannelPermissions"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<SharedModels.Invite>> GetChannelInvites(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<IEnumerable<SharedModels.Invite>>) methodImpls["GetChannelInvites"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteChannelPermission(string channelId,string overwriteId)
        {
            var arguments = new object[] { channelId,overwriteId };
            return (Task) methodImpls["DeleteChannelPermission"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task TriggerTypingIndicator(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task) methodImpls["TriggerTypingIndicator"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Message>> GetPinnedMessages(string channelId)
        {
            var arguments = new object[] { channelId };
            return (Task<IEnumerable<Message>>) methodImpls["GetPinnedMessages"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task AddPinnedChannelMessage(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task) methodImpls["AddPinnedChannelMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeletePinnedChannelMessage(string channelId,string messageId)
        {
            var arguments = new object[] { channelId,messageId };
            return (Task) methodImpls["DeletePinnedChannelMessage"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Invite> CreateChannelInvite(string channelid,CreateInvite invite)
        {
            var arguments = new object[] { channelid,invite };
            return (Task<SharedModels.Invite>) methodImpls["CreateChannelInvite"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.Gateway
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIGatewayConfigService : IGatewayConfigService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIGatewayConfigService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<GatewayConfig> GetGatewayConfig()
        {
            var arguments = new object[] {  };
            return (Task<GatewayConfig>) methodImpls["GetGatewayConfig"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.Guild
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIGuildService : IGuildService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIGuildService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Guild> CreateGuild(CreateGuild createGuild)
        {
            var arguments = new object[] { createGuild };
            return (Task<SharedModels.Guild>) methodImpls["CreateGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Guild> GetGuild(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<SharedModels.Guild>) methodImpls["GetGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Guild> ModifyGuild(string guildId,ModifyGuild modifyGuild)
        {
            var arguments = new object[] { guildId,modifyGuild };
            return (Task<SharedModels.Guild>) methodImpls["ModifyGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Guild> DeleteGuild(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<SharedModels.Guild>) methodImpls["DeleteGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<GuildChannel>> GetGuildChannels(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<GuildChannel>>) methodImpls["GetGuildChannels"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildChannel> CreateGuildChannel(string guildId,CreateGuildChannel createGuildChannel)
        {
            var arguments = new object[] { guildId,createGuildChannel };
            return (Task<GuildChannel>) methodImpls["CreateGuildChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildChannel> AckGuild(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<GuildChannel>) methodImpls["AckGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<GuildChannel>> ModifyGuildChannel(string guildId,ModifyGuildChannel modifyGuildChannel)
        {
            var arguments = new object[] { guildId,modifyGuildChannel };
            return (Task<IEnumerable<GuildChannel>>) methodImpls["ModifyGuildChannel"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<GuildChannel>> ModifyGuildChannelPositions(string guildId,int Position)
        {
            var arguments = new object[] { guildId,Position };
            return (Task<IEnumerable<GuildChannel>>) methodImpls["ModifyGuildChannelPositions"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildMember> ModifyCurrentUserNickname(string guildId,ModifyGuildMember member)
        {
            var arguments = new object[] { guildId,member };
            return (Task<GuildMember>) methodImpls["ModifyCurrentUserNickname"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildMember> GetGuildMemeber(string guildId,string userId)
        {
            var arguments = new object[] { guildId,userId };
            return (Task<GuildMember>) methodImpls["GetGuildMemeber"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<GuildMember>> ListGuildMemebers(string guildId,int limit,int after)
        {
            var arguments = new object[] { guildId,limit,after };
            return (Task<IEnumerable<GuildMember>>) methodImpls["ListGuildMemebers"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task ModifyGuildMember(string guildId,string userId,ModifyGuildMember modifyGuildMember)
        {
            var arguments = new object[] { guildId,userId,modifyGuildMember };
            return (Task) methodImpls["ModifyGuildMember"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task ModifyGuildMemberNickname(string guildId,string userId,ModifyGuildMember modifyGuildMember)
        {
            var arguments = new object[] { guildId,userId,modifyGuildMember };
            return (Task) methodImpls["ModifyGuildMemberNickname"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task RemoveGuildMember(string guildId,string userId)
        {
            var arguments = new object[] { guildId,userId };
            return (Task) methodImpls["RemoveGuildMember"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Ban>> GetGuildBans(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<Ban>>) methodImpls["GetGuildBans"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task CreateGuildBan(string guildId,string userId,CreateGuildBan createGuildBan)
        {
            var arguments = new object[] { guildId,userId,createGuildBan };
            return (Task) methodImpls["CreateGuildBan"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task RemoveGuildBan(string guildId,string userId)
        {
            var arguments = new object[] { guildId,userId };
            return (Task) methodImpls["RemoveGuildBan"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Role>> GetGuildRoles(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<Role>>) methodImpls["GetGuildRoles"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Role> CreateGuildRole(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<Role>) methodImpls["CreateGuildRole"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Role>> BatchModifyGuildRole(string guildId,IEnumerable<ModifyGuildRole> modifyGuildRoles)
        {
            var arguments = new object[] { guildId,modifyGuildRoles };
            return (Task<IEnumerable<Role>>) methodImpls["BatchModifyGuildRole"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Role> ModifyGuildRole(string guildId,string roleId,ModifyGuildRole modifyGuildRole)
        {
            var arguments = new object[] { guildId,roleId,modifyGuildRole };
            return (Task<Role>) methodImpls["ModifyGuildRole"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Role> DeleteGuildRole(string guildId,string roleId)
        {
            var arguments = new object[] { guildId,roleId };
            return (Task<Role>) methodImpls["DeleteGuildRole"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<PruneStatus> GetGuildPruneCount(string guildId,int daysToPrune)
        {
            var arguments = new object[] { guildId,daysToPrune };
            return (Task<PruneStatus>) methodImpls["GetGuildPruneCount"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<PruneStatus> BeginGuildPrune(string guildId,int daysToPrune)
        {
            var arguments = new object[] { guildId,daysToPrune };
            return (Task<PruneStatus>) methodImpls["BeginGuildPrune"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<VoiceRegion>> GetGuildVoiceRegions(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<VoiceRegion>>) methodImpls["GetGuildVoiceRegions"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<SharedModels.Invite>> GetGuildInvites(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<SharedModels.Invite>>) methodImpls["GetGuildInvites"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Integration>> GetGuildIntegrations(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<IEnumerable<Integration>>) methodImpls["GetGuildIntegrations"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task CreateGuildIntegration(string guildId,CreateIntegration createIntegration)
        {
            var arguments = new object[] { guildId,createIntegration };
            return (Task) methodImpls["CreateGuildIntegration"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task ModifyGuildIntegration(string guildId,string integrationId,ModifyIntegration modifyIntegration)
        {
            var arguments = new object[] { guildId,integrationId,modifyIntegration };
            return (Task) methodImpls["ModifyGuildIntegration"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task DeleteGuildIntegration(string guildId,string integrationId)
        {
            var arguments = new object[] { guildId,integrationId };
            return (Task) methodImpls["DeleteGuildIntegration"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task SyncGuildIntegration(string guildId,string integrationId)
        {
            var arguments = new object[] { guildId,integrationId };
            return (Task) methodImpls["SyncGuildIntegration"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildEmbed> GetGuildEmbed(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task<GuildEmbed>) methodImpls["GetGuildEmbed"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildEmbed> ModifyGuildEmbed(string guildId,GuildEmbed guildEmbed)
        {
            var arguments = new object[] { guildId,guildEmbed };
            return (Task<GuildEmbed>) methodImpls["ModifyGuildEmbed"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.Invite
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIInviteService : IInviteService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIInviteService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Invite> GetInvite(string inviteCode)
        {
            var arguments = new object[] { inviteCode };
            return (Task<SharedModels.Invite>) methodImpls["GetInvite"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Invite> DeleteInvite(string inviteCode)
        {
            var arguments = new object[] { inviteCode };
            return (Task<SharedModels.Invite>) methodImpls["DeleteInvite"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.Invite> AcceptInvite(string inviteCode)
        {
            var arguments = new object[] { inviteCode };
            return (Task<SharedModels.Invite>) methodImpls["AcceptInvite"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.Login
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedILoginService : ILoginService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedILoginService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<LoginResult> Login(LoginRequest loginRequest)
        {
            var arguments = new object[] { loginRequest };
            return (Task<LoginResult>) methodImpls["Login"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.User
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIUserService : IUserService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUserService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<SharedModels.User>> GetUsers(string usernameQuery,int limit)
        {
            var arguments = new object[] { usernameQuery,limit };
            return (Task<IEnumerable<SharedModels.User>>) methodImpls["GetUsers"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.User> GetCurrentUser()
        {
            var arguments = new object[] {  };
            return (Task<SharedModels.User>) methodImpls["GetCurrentUser"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<GuildSetting> ModifyGuildSettings(string guildId,GuildSetting guildSetting)
        {
            var arguments = new object[] { guildId,guildSetting };
            return (Task<GuildSetting>) methodImpls["ModifyGuildSettings"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task UpdateSettings(string settings)
        {
            var arguments = new object[] { settings };
            return (Task) methodImpls["UpdateSettings"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task UpdateGame(string game)
        {
            var arguments = new object[] { game };
            return (Task) methodImpls["UpdateGame"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.User> ModifyCurrentUser(ModifyUser modifyUser)
        {
            var arguments = new object[] { modifyUser };
            return (Task<SharedModels.User>) methodImpls["ModifyCurrentUser"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<SharedModels.User> GetUser(string userId)
        {
            var arguments = new object[] { userId };
            return (Task<SharedModels.User>) methodImpls["GetUser"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<UserGuild>> GetCurrentUserGuilds()
        {
            var arguments = new object[] {  };
            return (Task<IEnumerable<UserGuild>>) methodImpls["GetCurrentUserGuilds"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task LeaveGuild(string guildId)
        {
            var arguments = new object[] { guildId };
            return (Task) methodImpls["LeaveGuild"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<DirectMessageChannel>> GetCurrentUserDirectMessageChannels()
        {
            var arguments = new object[] {  };
            return (Task<IEnumerable<DirectMessageChannel>>) methodImpls["GetCurrentUserDirectMessageChannels"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<DirectMessageChannel> CreateDirectMessageChannelForCurrentUser(CreateDM createDM)
        {
            var arguments = new object[] { createDM };
            return (Task<DirectMessageChannel>) methodImpls["CreateDirectMessageChannelForCurrentUser"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Connection>> GetCurrentUserConnections()
        {
            var arguments = new object[] {  };
            return (Task<IEnumerable<Connection>>) methodImpls["GetCurrentUserConnections"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task AddNote(string userId,Note note)
        {
            var arguments = new object[] { userId,note };
            return (Task) methodImpls["AddNote"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<UserProfile> GetUserProfile(string id)
        {
            var arguments = new object[] { id };
            return (Task<UserProfile>) methodImpls["GetUserProfile"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<SharedFriend>> GetUserReleations(string id)
        {
            var arguments = new object[] { id };
            return (Task<IEnumerable<SharedFriend>>) methodImpls["GetUserReleations"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task SendFriendRequest(string id,string body)
        {
            var arguments = new object[] { id,body };
            return (Task) methodImpls["SendFriendRequest"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task BlockUser(string id,string body)
        {
            var arguments = new object[] { id,body };
            return (Task) methodImpls["BlockUser"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task RemoveFriend(string id,string body)
        {
            var arguments = new object[] { id,body };
            return (Task) methodImpls["RemoveFriend"](Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Message>> GetRecentMentions(int limit,bool ShowRoles,bool ShowEveryone)
        {
            var arguments = new object[] { limit,ShowRoles,ShowEveryone };
            return (Task<IEnumerable<Message>>) methodImpls["GetRecentMentions"](Client, arguments);
        }

    }
}

namespace Discord_UWP.API.Voice
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIVoiceService : IVoiceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIVoiceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<VoiceRegion>> ListVoiceRegions()
        {
            var arguments = new object[] {  };
            return (Task<IEnumerable<VoiceRegion>>) methodImpls["ListVoiceRegions"](Client, arguments);
        }

    }
}
