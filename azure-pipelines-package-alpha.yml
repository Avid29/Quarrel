# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

#trigger:
#  branches:
#    include:
#    - 'rewrite/alpha'

resources:
  repositories:
  - repository: QuarrelInstaller
    type: github
    endpoint: MyGitHubServiceConnection
    name: QuarrelForDiscord/QuarrelInstaller

trigger:
  branches:
    include:
    - '*'

pr: none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/Quarrel.App.sln'
  buildPlatform: 'x86|x64|arm|arm64'
  buildConfiguration: 'Alpha'
  installerDirectory: '$(Agent.RootDirectory)\QuarrelInstaller'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  buildDir: '$(build.artifactStagingDirectory)\build\\'
  msixUploads: '$(appxPackageDir)\**\\*.msixupload'
  msixBundles: '$(appxPackageDir)\**\\*.msixbundle'
  msixPackages: '$(appxPackageDir)\**\\*.msix'
  appInstaller: '$(appxPackageDir)\Quarrel.appinstaller'

steps:
- checkout: self
  persistCredentials: true
- checkout: QuarrelInstaller
  persistCredentials: true
#- task: DownloadSecureFile@1
#  displayName: Get Signing Certificate
#  name: signingCertificate
#  inputs:
#    secureFile: 'Quarrel-Alpha_Key.pfx'

#- task: DownloadSecureFile@1
#  displayName: Get AppCenterToken
#  name: appCenterToken
#  inputs:
#    secureFile: 'AppCenterAlpha.json'

#- task: PowerShell@2
#  displayName: Place AppCenterToken
#  inputs:
#    targetType: 'inline'
#    script: 'Copy-Item $Env:APP_CENTER_TOKEN_PATH -Destination "$($Env:BUILD_SOURCESDIRECTORY)/src/Quarrel/Assets/Tokens/AppCenter/"'
#  env:
#    APP_CENTER_TOKEN_PATH: $(appCenterToken.secureFilePath)

#- task: NuGetToolInstaller@1
#  displayName: 'NuGet Installer'

#- task: NuGetCommand@2
#  displayName: 'NuGet Restore'
#  inputs:
#    restoreSolution: '$(solution)'

#- task: VSBuild@1
#  displayName: 'Build'
#  inputs:
#    solution: '$(solution)'
#    platform: 'x64'
#    configuration: '$(buildConfiguration)'
#    msbuildArgs: '/t:Quarrel
#                  /p:AppxBundlePlatforms="$(buildPlatform)"
#                  /p:AppxPackageDir="$(appxPackageDir)"
#                  /p:OutputPath="$(buildDir)"
#                  /p:AppxBundle=Always
#                  /p:AppxPackageSigningEnabled=true
#                  /p:PackageCertificateKeyFile="$(signingCertificate.secureFilePath)"
#                  /p:PackageCertificateThumbprint="$(SignedCertificateThumbprint-Alpha)" 
#                  /p:PackageCertificatePassword="$(SignCertificatePassword-Alpha)"'

#- task: GitHubRelease@1
#  displayName: 'Create GitHub release'
#  inputs:
#    gitHubConnection: 'Avid29'
#    repositoryName: 'UWPCommunity/Quarrel'
#    action: 'create'
#    target: '$(Build.SourceVersion)'
#    tag: "alpha-v$(Build.BuildNumber)"
#    tagSource: 'userSpecifiedTag'
#    title: 'Alpha-v$(Build.BuildNumber)'
#    isPreRelease: true
#    changeLogCompareToRelease: 'lastFullRelease'
#    changeLogType: 'commitBased'
#    assets: |
#      $(msixUploads)
#      $(msixBundles)
#      $(msixPackages)
#      $(appInstaller)

- script: |
    cd $(installerDirectory)
    git config --global user.email $(GitHub-Email)
    git config --global user.name "Adam Dernis"
    git config --global user.password $(GitHub-Token)
  displayName: Clone QuarrelInstaller repo
  workingDirectory: $(Agent.RootDirectory)

#- task: CopyFiles@2
#  displayName: Copy artifacts to QuarrelInstaller repo
#  inputs:
#    SourceFolder: '$(build.artifactStagingDirectory)'
#    Contents: '**'
#    TargetFolder: '$(installerDirectory)'

- script: |
   echo 'This is a test' > test.txt
  displayName: Test add file
  workingDirectory: $(installerDirectory)

- script: |
    git add *
    git commit -m "Update to $(Build.BuildNumber)"
    echo 'test'
    git push origin main
  displayName: Push to QuarrelInstaller repo
  workingDirectory: $(installerDirectory)

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact: drop'
#  inputs:
#    PathtoPublish: '$(build.artifactStagingDirectory)'