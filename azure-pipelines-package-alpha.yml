# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: QuarrelInstaller
    type: github
    endpoint: Connection
    name: QuarrelForDiscord/QuarrelInstaller

trigger:
  branches:
    include:
    - 'rewrite/alpha'

pr: none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/Quarrel.App.sln'
  buildPlatform: 'x86|x64|arm'
  buildConfiguration: 'Alpha'
  installerDirectory: './QuarrelInstaller'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  buildDir: '$(build.artifactStagingDirectory)\build\\'
  msixUploads: '$(appxPackageDir)\**\\*.msixupload'
  msixBundles: '$(appxPackageDir)\**\\*.msixbundle'
  msixPackages: '$(appxPackageDir)\**\\*.msix'
  appInstaller: '$(installerDirectory)\Quarrel.appinstaller'
  siteUri: 'https://quarrelfordiscord.github.io/QuarrelInstaller/'

steps:
- checkout: self
- checkout: QuarrelInstaller
  persistCredentials: true
- task: DownloadSecureFile@1
  displayName: Get Signing Certificate
  name: signingCertificate
  inputs:
    secureFile: 'Quarrel-Alpha_Key.pfx'

- task: DownloadSecureFile@1
  displayName: Get AppCenterToken
  name: appCenterToken
  inputs:
    secureFile: 'AppCenterAlpha.json'

- task: PowerShell@2
  displayName: Place AppCenterToken
  inputs:
    targetType: 'inline'
    script: 'Copy-Item $Env:APP_CENTER_TOKEN_PATH -Destination "$($Env:BUILD_SOURCESDIRECTORY)/Quarrel/src/Quarrel/Assets/Tokens/AppCenter/"'
  env:
    APP_CENTER_TOKEN_PATH: $(appCenterToken.secureFilePath)

- task: NuGetToolInstaller@1
  displayName: 'NuGet Installer'

- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build'
  inputs:
    solution: '$(solution)'
    platform: 'x64'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/t:Quarrel
                  /p:AppxBundlePlatforms="$(buildPlatform)"
                  /p:AppxPackageDir="$(appxPackageDir)"
                  /p:OutputPath="$(buildDir)"
                  /p:AppxBundle=Always
                  /p:AppxPackageSigningEnabled=true
                  /p:PackageCertificateKeyFile="$(signingCertificate.secureFilePath)"
                  /p:PackageCertificateThumbprint="$(SignedCertificateThumbprint-Alpha)" 
                  /p:PackageCertificatePassword="$(SignCertificatePassword-Alpha)"
                  /p:AppInstallerUri="${siteUri}"
                  /p:AppInstallerUpdateFrequency=1
                  /p:AppInstallerCheckForUpdateFrequency=OnApplicationRun
                  /p:GenerateAppInstallerFile=true'

- powershell: |
    [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq")
    $doc = [System.Xml.Linq.XDocument]::Load(
      "$(appxPackageDir)/Quarrel.appinstaller")
    $xName = "{http://schemas.microsoft.com/appx/appinstaller/2017/2}MainBundle"
    $bundle = $doc.Root.Element($xName).Attribute("Uri").Value.Replace("${siteUri}", "");
    Copy-Item $bundle -Destination ($(build.artifactStagingDirectory) + $bundle.Replace("/", "_"));
    $doc.Root.Element($xName).Attribute("Uri").Value = 
      "https://github.com/UWPCommunity/Quarrel/releases/download/alpha-v$(Build.BuildNumber)/Quarrel.appinstaller" + 
      $bundle.Replace("/", "_");
      
    $xName = "{http://schemas.microsoft.com/appx/appinstaller/2017/2}Dependencies"

    foreach ($element in $doc.Root.Elements($xName)){
      $dep = $element.Attribute("Uri").Value.Replace("${siteUri}", "");
      Copy-Item $dep -Destination ($(build.artifactStagingDirectory) + $dep.Replace("/", "_"));
      $element.Attribute("Uri").Value = 
        "https://github.com/UWPCommunity/Quarrel/releases/download/alpha-v$(Build.BuildNumber)/Quarrel.appinstaller" + 
        $dep.Replace("/", "_");
    }
    $doc.Save("$(appInstaller)")
  displayName: 'Fix appinstaller'

- task: GitHubRelease@1
  displayName: 'Create GitHub release'
  inputs:
    gitHubConnection: 'Avid29'
    repositoryName: 'UWPCommunity/Quarrel'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tag: "alpha-v$(Build.BuildNumber)"
    tagSource: 'userSpecifiedTag'
    title: 'Alpha-v$(Build.BuildNumber)'
    isPreRelease: true
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      '$(build.artifactStagingDirectory)/*'

- task: CopyFiles@2
  displayName: Copy artifacts to QuarrelInstaller repo
  inputs:
    SourceFolder: '$(build.artifactStagingDirectory)'
    Contents: '**'
    TargetFolder: '$(installerDirectory)'

- script: |
    git config --global user.email $(GitHub-Email)
    git config --global user.name "Azure Pipelines"
    git add *
    git commit -m "Update to $(Build.BuildNumber)"
    git remote -v

    echo 'test'
    git push origin HEAD:refs/heads/master
  displayName: Push to QuarrelInstaller repo
  workingDirectory: $(installerDirectory)

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactStagingDirectory)'